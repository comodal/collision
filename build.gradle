buildscript { repositories { jcenter() } }
plugins {
  id 'java'
  id 'eclipse'
  id 'idea'
  id 'pl.allegro.tech.build.axion-release' version '1.4.0'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.7.1'
  id 'checkstyle'
}

scmVersion {
  tag {
    prefix = project.name
  }

  repository {
    customUsername = "$System.env.AXION_RELEASE_GITHUB_TOKEN"
    customPassword = ""
  }

  createReleaseCommit true
  releaseCommitMessage { version, position -> "Release $project.name-$version" }

  checks {
    uncommittedChanges = false
  }
}

project.group = 'com.fabahaba'
project.version = scmVersion.version

sourceCompatibility = 9

repositories {
  maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
  jcenter()
}

dependencies {
  testCompile 'junit:junit:+'
  testCompile 'com.github.ben-manes.caffeine:caffeine:+'
  testCompile 'org.cache2k:cache2k-api:+'
  testCompile 'org.cache2k:cache2k-core:+'
}

sourceSets {
  test {
    java {
      srcDir 'src/unit/java'
    }
    resources {
      srcDir 'src/unit/resources'
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar
    }
  }
}

artifacts {
  archives sourcesJar
}

bintray {
  user = "$System.env.BINTRAY_USER"
  key = "$System.env.BINTRAY_API_KEY"

  publications = ['mavenJava']

  pkg {
    repo = 'libs'
    name = project.name
    desc = 'Java 9 Cache'
    websiteUrl = 'https://github.com/jamespedwards42/' + project.name
    vcsUrl = 'https://github.com/jamespedwards42/' + project.name
    issueTrackerUrl = 'https://github.com/jamespedwards42/' + project.name + '/issues'
    licenses = ["Apache-2.0"]
    publish = true
    version {
      name = project.version
      vcsTag = scmVersion.tag.prefix + '-' + project.version
      gpg {
        sign = true
        passphrase = "$System.env.BINTRAY_GPG_PASSPHRASE"
      }
    }
  }
}

bintrayUpload.onlyIf { !project.version.endsWith('SNAPSHOT') }

//findbugs {
//  toolVersion = "+"
//  reportsDir = file("$project.buildDir/findbugsReports")
//  effort = "max"
//  reportLevel = "low"
//  ignoreFailures = false
//  excludeFilter = file("findbugs-exclude.xml")
//}
//
//tasks.withType(FindBugs) {
//  reports {
//    xml.enabled false
//    html.enabled true
//  }
//}

checkstyle {
  config = resources.text.fromFile("checkstyle/google-checks.xml")
  configProperties = [samedir: "${projectDir}/checkstyle"]
  reportsDir = file("$project.buildDir/checkstyleReports")
  toolVersion = "+"
  ignoreFailures = false
}
